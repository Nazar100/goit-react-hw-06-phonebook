{"version":3,"sources":["components/Form/ContactsForm.module.css","redux/actions.js","components/Form/ContactsForm.jsx","redux/selectors.js","components/Contacts/Contacts.jsx","components/Filter/Filter.jsx","App.js","reportWebVitals.js","redux/reducer.js","redux/store.js","index.js","components/Contacts/Contacts.module.css"],"names":["module","exports","contactsActions","addContacts","createAction","name","number","payload","id","shortid","generate","deleteContact","changeFilter","ContactsForm","checkExistingContacts","useState","setName","setNumber","dispatch","useDispatch","handleInput","target","value","validateFrom","alert","onSubmit","e","preventDefault","className","s","container","type","onChange","getFilter","state","contacts","filter","getVisibleContacts","getContacts","normalizedFilter","toLowerCase","includes","Contacts","useSelector","length","map","button","data-key","onClick","empty","Filter","input","App","isExistingContact","find","contact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","createReducer","actions","_","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","contactsPersistConfig","key","storage","blacklist","store","configureStore","reducer","persistReducer","contactsReducer","devTools","process","persistStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.aa314c39.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ContactsForm_container__so_Rq\"};","import { createAction } from '@reduxjs/toolkit';\nimport shortid from 'shortid';\n\nconst addContacts = createAction('contacts/add', (name, number) => ({\n  payload: {\n    id: shortid.generate(),\n    name,\n    number,\n  },\n}));\n\nconst deleteContact = createAction('contacts/delete');\nconst changeFilter = createAction('contacts/changeFilter');\n\nconst contactsActions = { addContacts, deleteContact, changeFilter };\n\nexport default contactsActions;\n","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport contactsActions from '../../redux/actions';\n\nimport s from './ContactsForm.module.css';\n\nfunction ContactsForm({ checkExistingContacts }) {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const dispatch = useDispatch();\n\n  const handleInput = ({ target }) => {\n    const { name, value } = target;\n    if (name === 'name') {\n      setName(value);\n    } else {\n      setNumber(value);\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    const isValidFrom = validateFrom();\n    if (!isValidFrom) return;\n\n    dispatch(contactsActions.addContacts(name, number));\n\n    setNumber('');\n    setName('');\n  };\n\n  const validateFrom = () => {\n    if (!name || !number) {\n      alert('Some input is empty');\n      return false;\n    }\n\n    return checkExistingContacts(name);\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <div className={s.container}>\n        <label>\n          Enter the name\n          <input type=\"text\" value={name} name=\"name\" onChange={handleInput} />\n        </label>\n        <label>\n          Enter the number\n          <input\n            type=\"tel\"\n            value={number}\n            name=\"number\"\n            onChange={handleInput}\n          />\n        </label>\n      </div>\n\n      <button type=\"submit\">Add contact</button>\n    </form>\n  );\n}\n\nexport default ContactsForm;\n","export const getContacts = state => {\n  return state.contacts.contacts;\n};\nexport const getFilter = state => state.contacts.filter;\n\nexport const getVisibleContacts = state => {\n  const contacts = getContacts(state);\n  const filter = getFilter(state);\n  const normalizedFilter = filter.toLowerCase();\n\n  return contacts.filter(({ name }) => {\n    return name.toLowerCase().includes(normalizedFilter);\n  });\n};\n","import { useDispatch, useSelector } from 'react-redux';\nimport contactsActions from '../../redux/actions';\nimport { getVisibleContacts } from '../../redux/selectors';\n\nimport s from './Contacts.module.css';\n\nexport default function Contacts() {\n  const contacts = useSelector(getVisibleContacts);\n\n  const dispatch = useDispatch();\n\n  const deleteContact = id => dispatch(contactsActions.deleteContact(id));\n\n  return (\n    <ul>\n      {contacts.length > 0 &&\n        contacts.map(({ name, number, id }) => {\n          return (\n            <li key={id}>\n              <span className={s.name}>Name: {name}</span>\n              <span className={s.number}>Number: {number}</span>\n              <button\n                className={s.button}\n                data-key={id}\n                onClick={() => deleteContact(id)}\n              >\n                Delete\n              </button>\n            </li>\n          );\n        })}\n      {contacts.length === 0 && <li className={s.empty}>List is Empty</li>}\n    </ul>\n  );\n}\n","import { useSelector, useDispatch } from 'react-redux';\nimport { getFilter } from '../../redux/selectors';\nimport contactsActions from '../../redux/actions';\n\nimport s from './Filter.module.css';\n\nexport default function Filter() {\n  const value = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  return (\n    <label>\n      Filter\n      <input\n        className={s.input}\n        type=\"text\"\n        value={value}\n        onChange={e => {\n          return dispatch(contactsActions.changeFilter(e.target.value));\n        }}\n      />\n    </label>\n  );\n}\n","import { useSelector } from 'react-redux';\nimport React from 'react';\nimport './App.css';\nimport ContactsForm from './components/Form/ContactsForm';\nimport Contacts from './components/Contacts/Contacts';\nimport Filter from './components/Filter/Filter';\nimport { getVisibleContacts } from './redux/selectors';\n\nfunction App() {\n  const contacts = useSelector(getVisibleContacts);\n\n  const checkExistingContacts = name => {\n    const isExistingContact = !!contacts.find(contact => {\n      return contact.name === name;\n    });\n\n    isExistingContact && alert(`${name} is already in your contacts`);\n\n    return !isExistingContact;\n  };\n\n  return (\n    <div className=\"container\">\n      <div>\n        <h1>Phonebook</h1>\n        <ContactsForm checkExistingContacts={checkExistingContacts} />\n        <Filter />\n      </div>\n      <div>\n        <h2>Contacts</h2>\n        <Contacts />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport actions from './actions';\n\nconst contacts = createReducer([], {\n  [actions.addContacts]: (state, { payload }) => [...state, payload],\n  [actions.deleteContact]: (state, { payload }) =>\n    state.filter(({ id }) => id !== payload),\n});\n\nconst filter = createReducer('', {\n  [actions.changeFilter]: (_, { payload }) => payload,\n});\n\nexport default combineReducers({\n  contacts,\n  filter,\n});\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport logger from 'redux-logger';\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport contactsReducer from './reducer';\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n  logger,\n];\n\nconst contactsPersistConfig = {\n  key: 'contacts',\n  storage,\n  blacklist: ['filter'],\n};\n\nexport const store = configureStore({\n  reducer: {\n    contacts: persistReducer(contactsPersistConfig, contactsReducer),\n  },\n  middleware,\n  devTools: process.env.NODE_ENV === 'development',\n});\n\nexport const persistor = persistStore(store);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport { store } from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"name\":\"Contacts_name__25ers\",\"number\":\"Contacts_number__3xFN5\",\"button\":\"Contacts_button__3OGpI\",\"empty\":\"Contacts_empty__1zP8v\"};"],"sourceRoot":""}